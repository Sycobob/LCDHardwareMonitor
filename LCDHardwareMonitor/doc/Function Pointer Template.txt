	template<typename TInterface, typename TMethod, typename TPlugin, typename TDelegate, typename TFnPointer>
	void
	GetPluginFunctionPointer(TPlugin instance, TDelegate^% delegate, TFnPointer& fnPointer)
	{
		TInterface^ interface = dynamic_cast<TInterface^>(instance);
		if (interface)
		{
			delegate  = gcnew TDelegate(interface, &TMethod);
			fnPointer = (TFnPointer) (void*) Marshal::GetFunctionPointerForDelegate(delegate);
		}
	}

	b32
	InitializeSensorPlugin(PluginHeader* pluginHeader, SensorPlugin* sensorPlugin)
	{
		b32 success = LoadAssemblyAndInstantiateType(pluginHeader->name, sensorPluginCLR.instance);
		if (!success) return false;

		GetPluginFunctionPointer<ISensorInitialize>(sensorPluginCLR.instance, sensorPluginCLR.initializeDelegate, sensorPlugin->initialize);
		GetPluginFunctionPointer<ISensorUpdate>    (sensorPluginCLR.instance, sensorPluginCLR.updateDelegate,     sensorPlugin->update);
		GetPluginFunctionPointer<ISensorTeardown>  (sensorPluginCLR.instance, sensorPluginCLR.teardownDelegate,   sensorPlugin->teardown);

		return true;
	}

	b32
	InitializeWidgetPlugin(PluginHeader* pluginHeader, WidgetPlugin* widgetPlugin)
	{
		b32 success = LoadAssemblyAndInstantiateType(pluginHeader->name, widgetPluginCLR.instance);
		if (!success) return false;

		GetPluginFunctionPointer<IWidgetInitialize>(widgetPluginCLR.instance, widgetPluginCLR.initializeDelegate, widgetPlugin->initialize);
		GetPluginFunctionPointer<IWidgetUpdate>    (widgetPluginCLR.instance, widgetPluginCLR.updateDelegate,     widgetPlugin->update);
		GetPluginFunctionPointer<IWidgetTeardown>  (widgetPluginCLR.instance, widgetPluginCLR.teardownDelegate,   widgetPlugin->teardown);

		return true;
	}
