#include "../src/Blur.ps.h"

Texture2D source;
Texture2D sourceDepth;
SamplerState samplerState;

struct PixelFragment
{
	float4 PosH  : SV_POSITION;
	float4 Color : COLOR;
	float2 UV    : TEXCOORD;
};

float4 main(PixelFragment pIn) : SV_TARGET
{
	int radius = 1;
	float2 texelStep = 1.0 / textureSize * direction;

	float4 maxColor = float4(0, 0, 0, 0);
	float maxLength = 0;
	for (int i = -radius; i <= radius; i++)
	{
		float2 sampleUV = pIn.UV + (i * texelStep);
		float4 srcColor = source.Sample(samplerState, sampleUV);

		float srcLength = length(srcColor.rgb);
		maxColor.rgb = lerp(maxColor.rgb, srcColor.rgb, srcLength > maxLength);
		maxLength = max(maxLength, srcLength);
		maxColor.a += srcColor.a;
	}
	// This extra divide is to make the falloff slower
	maxColor.a /= (2.f * radius + 1.f) / 1.2f;

	float4 origColor = source.Sample(samplerState, pIn.UV);
	float origDepth = sourceDepth.Sample(samplerState, pIn.UV).r;
	bool isOriginalPixel = origDepth != 1;
	return lerp(maxColor, origColor, isOriginalPixel);
}
