#include "../src/Outline.ps.h"

Texture2D srcTex;
Texture2D srcDepthTex;
SamplerState samplerState;

struct PixelFragment
{
	float4 PosH  : SV_POSITION;
	float4 Color : COLOR;
	float2 UV    : TEXCOORD;
};

struct Pixel
{
	float4 Color : SV_TARGET;
	float  Depth : SV_DEPTH;
};

// TODO: Is the +1 in scale correct?
// TODO: Looks like scale and slope can be simplified together
float CalcOutline(int blurRadius, int distance)
{
	float solidPixels = 2.25;
	float slope = -1.0 / (blurRadius + 1);           // Alpha falloff rate
	float scale = 1.0 / ((slope * solidPixels) + 1); // Saturate the first few pixels
	float alpha = saturate(scale * ((slope * distance) + 1));
	return alpha;
}

// TODO: Get rid of branches
// TODO: Figure out how to move blur radius to a constant buffer without messing up the loop
Pixel main(PixelFragment pIn)
{
	Pixel pOut;

	int blurRadius = 6;
	float2 texelStep = 1.0 / textureSize * blurDirection;

	float alpha = 0;
	float depth = 1;
	for (int i = 1; i <= blurRadius; i++)
	{
		float srcAlpha = srcTex.Sample(samplerState, pIn.UV + (i * texelStep)).a;
		float srcDepth = srcDepthTex.Sample(samplerState, pIn.UV + (i * texelStep)).r;

		srcAlpha = CalcOutline(blurRadius, i) * srcAlpha;
		if (srcAlpha > alpha)
		{
			alpha = srcAlpha;
			depth = srcDepth;
		}
	}
	for (i = 1; i <= blurRadius; i++)
	{
		float srcAlpha = srcTex.Sample(samplerState, pIn.UV - (i * texelStep)).a;
		float srcDepth = srcDepthTex.Sample(samplerState, pIn.UV - (i * texelStep)).r;

		srcAlpha = CalcOutline(blurRadius, i) * srcAlpha;
		if (srcAlpha > alpha)
		{
			alpha = srcAlpha;
			depth = srcDepth;
		}
	}

	bool anything = depth != 1;
	if (anything)
	{
		pOut.Color = float4(1, 1, 1, alpha);
		pOut.Depth = depth;
	}
	else
	{
		clip(-1);
		pOut.Color = float4(0, 0, 0, 0);
		pOut.Depth = 1;
	}

	return pOut;
}
