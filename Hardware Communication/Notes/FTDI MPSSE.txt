// Interfaces
// 	UART                     12 mbaud (default)
// 	FT245 Synchronous FIFO   40 mBps
// 	FT245 Asynchronous FIFO  8 mBps
// 	Async/Sync Bit-Bang
// 	MPSSE (JTAG SPI I2C)     30 mbps
// 	Fast Serial              12 mbps, opto-isolated
// 	CPU-Style FIFO
// 	FT1248

// Device
// 	I/O is 3.3V but 5V tolerant

// 60 FPS: 8.79 mBps (70 mbps)

// Chip Basics
// https://www.ftdichip.com/Support/Documents/DataSheets/ICs/DS_FT232H.pdf

// MPSSE Basics
// http://www.ftdichip.com/Support/Documents/AppNotes/AN_135_MPSSE_Basics.pdf

// MPSSE Commands
// https://www.ftdichip.com/Support/Documents/AppNotes/AN_108_Command_Processor_for_MPSSE_and_MCU_Host_Bus_Emulation_Modes.pdf

// MPSSE Examples
// https://www.ftdichip.com/Support/SoftwareExamples/MPSSE.htm

// FTDI Program Guides
// https://www.ftdichip.com/Support/Documents/ProgramGuides.htm

// Adaptive clocking: I don't think we need it (for ARM processors)
// Mode set: Read from (external) EEPROM on reset
// 	Is this different than regular EEPROM? There's a separate tool
// 	http://www.ftdichip.com/Resources/Utilities/FT_Prog_v1.4.zip
// 	FT_SetBitMode to change at runtime

// MPSSE
// 	CLKOUT=30MHz
// 	MPSSE mode is enabled using FT_SetBitMode with value 0x02
// 	Reset: FT_SetBitMode 0x00
// 	Master-only
// 	GPIOL1 is reserved/used in SPI
// 	MOSI/MISO have pull-ups, can be left unconnected
// 	Everything is sent over plain read/write calls to D2XX
// 	If the host and slave have different endianess might have to toggle MSB/LSB for read/write
// 	Both byte and bit based commands available
// 	Commands operate on bytes, MSB
// 	60 MHz clock. Speed = 60 / ((1 + Div) * 2) (probably)
// 	Clock div 5 enabled by default
// 	Can send on rising or falling edges. Need to check screen.
// 	Initial state of SK/TCK determines clock order
// 	Multiple commands can be sent in a single FT_Write? Not sure what the means exactly.
// 	Write buffer: 1 B command, 2 B data length, 1 - 65536 B payload
// 	Commands: op-code then 1+ parameters
// 	Bad command returns 0xFA
// 	Intentionally write bad command and check for 0xFA
// 	GPIO read: FT_Write command then FT_Read
// 	Docs looks like they reset MPSSE before closing
// 	If sent individually, as demonstrated below, the speed at which the GPIO signals can be
// 		changed is limited to the USB bus sending each FT_Write callin a separate transaction. This
// 		is one of the cases where it is desirable to chain multiple MPSSE commands into a single
// 		FT_Write call. The CS can be set, data transferred and CS cleared with one call.
