Current
-------
Outline
	Use stencil instead of an extra depth texture
	Think through clears carefully
	Consider removing the depth to alpha pass
	Outline only needs to produce alpha
	Think about the three depth resources for outline composite

Bring ILI9341 code over
	Add a tracing option
	Use SetBit to simplify config

Bring FT232H code over
	Ensure we can always init, even if in a bad state
	Coalesce writes
	Switch to parallel interface

Implement layering for the renderer API to remove runtime branching
Validate Push/PopEvent counts
Compare writes to python code (ft232h and ili9341)
Compare reads to python code (ft232h and ili9341)
Delete HardwareCommunication
Read from display



Bugs
----
Lag when selecting preview while GUI is open
D3D leak when closing with selection
D3D warning:
	D3D11 WARNING: ID3D11DeviceContext::PSSetShaderResources:
	Resource being set to PS shader resource slot 1 is still bound on output! Forcing to NULL.
	[ STATE_SETTING WARNING #7: DEVICE_PSSETSHADERRESOURCES_HAZARD]
Fix flush pipe error
Fix VS crash
	devenv crashes with Exception code: 0xc0000374 (heap corruption?)
	only seems to happen with multiple startup projects
	LHM appears to hang in D3D creation sometimes? Unrelated?
Look at tlbgen and references vs pointers
Fix 64 bit warnings from tlbgen
Support x86 and x64
GUI shouldn't close the simulation if it didn't start it
There's a frame of flicker where the old image size is drawn when zooming. Is this fixable?
There's some sort of mouse position jump on my laptop when rotating the camera
I think pipes want to be no-wait
Ensure we're handling CloseHandle failures correctly
Double check anywhere we index bytes.data in case we're forgetting stride



Refactoring
-----------
Starting to feel like state checking should be in the sim
Try removing WidgetData
Start using Scoped
Namespaces
Native namespace for interop?
String_FromView vs Create vs Copy
Using "constexpr static bool" instead of #defines
Rewrite List<T>
Try out range based for loops
Is it cleaner to use the auto-COM-interface of LHMPluginLoader?
Ensure Platform function naming is uniform
Decide on 'plugin loader' naming on both sides of the managed boundary
Consider building with a batch script
Consider using premake
Try to use a property sheet for bin/obj dirs, clean, and post build



Refactoring - Memory handling
-----------------------------
Run gflags and sanitizers
Figure out what happens when memory allocations fail
Re-use memory when formatting
Use an arena for logging
Add a proper OOM crash flow
Add a StackAllocator (with debugging)
Add a HeapAllocator (with debugging)
Push context onto a stack and dump during OOM crash
Style 1: Soft abort (log, save, close resources, exit)
Style 2: Hard Abort (exit)
Probably a function instead of a signal handler
Manual failure points



Refactoring - Error Handling
----------------------------
Don't log immediately, but push contextual string into a list
Each function up the stack adds its own information
Last function to handle the error does the printing
Might have to allocate for the formatting, so check if strings are dynamic and free them
Maybe change functions to return a Result<T> with operator b8(), context string, etc
Goal: only a single print occurs during an error, but it may be multiple lines
The top level handler is the one who knows if something is a warning or an error, not the inner
	most handler. LoadFile can't know if it's loading a cache file or a critical resource.
Implement a Result<T> that can hold a return value or error information
I'm sure there are places where we're going to end up in a partially initialized state when
	errors occur. We need to double down on transactional changes. Check all existing code.



Features
--------
Stop sending mouse move when mouse isn't over window?
Is it worth trying to make things portable?
Only create and copy into GUI texture when GUI is connected
Implement settings to remember e.g. which plugins should be loaded
Settings - Enable/disable sensors
Settings - Enable/disable widgets
Asset loading might be slow. Do we need to do it on a background thread?
Need to handle mouse position when preview isn't visible
Need to actually avoid processing broken plugins
Users probably need to be able to create custom UI for plugin settings
Watch plugin directory contents for registering, unregistering, and reloading plugins.




Features - FT232H Communication
-------------------------------
Think about reconnection strategy. Exponential backoff? Simple timer? Respond to OS USB events?



Features - ILI9341 Communication
--------------------------------
Profile and compare 16bit and 18bit modes. 16bit uses a lookup table. 18bit uses 50% more bandwidth.
Write to a buffer and only flush when full or need to sleep
Add proper error handling
Implement hardware reset



Features - Rendering
--------------------
Expand Copy operation to take any src and dst
Runtime shader compilation & hot reloading (shader cache)
Remove types from resource names
Add push and pop for blend modes
Change rasterizer state to be runtime configurable
Render with alpha, then convert to 16 bit
I'm no longer convince the Push/Pop model is all that useful. Why not just Set everything?
	Push/Pop is good for plugins, so they can change and restor state without knowing what the state
	was. But we could also just re-apply state between plugins. Or only use PushPop for plugins and
	Set for internal code.
Add a way to push both a render target and depth buffer in the same command
Add a way to set multiple resources (and to specify the slot)
Need sorting if we're actually going to support alpha for users
Implement unloading assets. Will require reference counting, I think. Needed for unloading plugins.
	Also means creation needs to reuse slots.
What happens if we call random renderer api and the device is disconnected? Presumably it can happen
	at any time, not just during an update?
Should failing to load an asset mark the file as bad?
Can we bundle setting shaders with setting and updating constant buffers?
Consider compiling out renderer validation in plugin API functions in release
Ensure the update API can't create resources and let the command list store pointers.
Double buffer CPU texture to prevent syncing?



Features - GUI
--------------
Reset GUI interactions when GUI or preview lose focus.
	Primary goal here is to avoid input getting stuck when alt tabbing
	Secondary goal is to avoid mouse position discontinuity when tabbing between GUI and preview
Drag sensors
Reconcile input when connecting (buttons already down) and disconnecting (release down buttons).
Is it worth trying to send everything at once? (Slice<List<Sensor>> feels kind of silly)
Decide whether we should be sending multiple refs (plugin ref + instance ref) or compound refs (FullWidgetRef)
Deal with PluginRef vs WidgetPluginRef on managed side
Implement all the remove functions
Only allow drop on widgets when dragging sensors
Configure widgets
Configure global settings (update rate)
Allow selection for objects under other objects (selection stack?)
https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/drag-and-drop-overview
https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/data-and-data-objects



Features - Update rate control
------------------------------
How should this interact with the rate at which we send gui messages?
1) SetTimer: Must set system timer frequency
2) Multimedia timers: Accurate. Appears to set system timer frequency
3) Waitable timers
4) Timer queue timers
5) Threadpool timers
6) select() (winsock2)
7) usleep/nanosleep (posix)
* Might be stuck changing the windows timer. Only set it when necessary. Don't set it at all
	when on battery power (give user an option to set it anyway).
* CreateTimerQueueTimer, timeSetEvent, timeBeginPeriod appear to all use the timer
	resolution. CreateWaitableTimer appears to enforce an accurate average (looks like it still
	works in multiples of the timer resolution, so still not good enough).
	https://www.codeguru.com/cpp/w-p/system/timers/article.php/c5759/Creating-a-HighPrecision-HighResolution-and-Highly-Reliable-Timer-Utilising-Minimal-CPU-Resources.htm



Features - OHM Plugin
---------------------
Probably need a replacement SDK since it's unmaintained
	CPUID System Monitor SDK is one option, but it's paid
	AIDA64 doesn't have an SDK but it supports WMI and shared memory
	Rivatuner?
	HWiNFO (promising!)



Features - Plugins
------------------
Handle multiple plugins in the same file (probably just a detailed error)
Allow logging from plugins
Can plugins share shaders? (maybe not)
Should plugins get a raw pointer to D3D instead of having an abstracted API?
Implement 'services' (mainly logging)
How will managed code use native services and api? (~~probably dllimport~~) (er, function ptr
	like everything else?)
Do we need to support people using objects in plugins (e.g do we need to give dtors an
	opportunity to run?)
Sensors need a stable id across runs.
Write a tutorial for creating plugins. Warn about loader lock. Warn about
	using version/strong name for dependencies so you don't end up with the
	wrong one because the name matched.
Create a template C++/CLI project and a tutorial for writing .NET plugins.
Ensure debugging for both native and managed plugins is reasonable.
Catch managed exceptions from the native side. Can't have them crash the
	application.
Decide whether plugins needing elevation should be expressed in the plugin
	API. OHM requires elevation to work, and presumably other hardware senors
	plugins might as well. If plugins can say "i require elevation" then we
	can warn the user at startup that an enabled plugin requries elevation
	but the program is not elevated. This in turn means we are less likely
	to crash from loading that assumes elevation and break, and we don't have
	to ship with elevation enabled by default.
MSI Afterburner uses SMART.dll, PerfCounter.dll, HwInfo.dll, AIDA64.dll.
	Would any of these be useful plugins?



Features - Outline shader
-------------------------
Use premultiplied alpha to composite darken and highlight in a single pass
Consider bringing hovered/selected widgets to the front to avoid outline depth issues
Clamp outline to screen edges
Consider using a UAV for simultaneous read and write



Reliability
-----------
Check for mismatched push/pop calls in plugins
We don't support XP. Don't allow running on it.
Decide on static or dynamic linking to e.g. the CRT. Bundle redistributables if dynamically linking.
Remove WRL dependency
Remove all unused Windows link dependencies
Add UTF-8 support?
Reduce link dependencies
Implement a way to get errors from users. Event tracing? Windows error reporting? Dumps? Telemetry?
Reset state structs if Initialize fails
Ensure program doesn't cause all CPU cores to boost constantly (preferably at all)
Collect crash reports / metrics
Test with different character code pages.
