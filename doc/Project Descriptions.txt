Compiler: MSVC 2019
Language: C++17



Projects
LCDHardwareMonitor
Project dependencies: LCDHardwareMonitor PluginLoader CLR
Other references: None
Include directories: LCDHardwareMonitor API
Library dependencies: MSCorEE.lib, D3D11.lib, D3D9.lib, DXGI.lib, d3dcompiler.lib
Output: exe
Compiler flags: None
Post build: "Deploy.bat" "$(OutDir)" && CopyD3DC.bat "$(WindowsSdkDir)" $(PlatformTarget)
This is the main project. Contains the the core application as well as unmanaged
hosting code the starts the CLR and communicates with LCDHardwareMonitor
PluginLoader CLR on the managed side.

LCDHardwareMonitor API CLR
Project dependencies: None
Other references: None
Include directories: LCDHardwareMonitor API
Output: dll
Compiler flags: /clr
Post build: "Deploy.bat" "$(OutDir)"
Contains managed descriptions of all interfaces available to plugins.

LCDHardwareMonitor GUI
Project dependencies: LCDHardwareMonitor GUI Interop
Other references: MahApps.Metro, ControlzEz, System.Windows.Interactivity
Output: exe
Compiler flags: None
Post build: PUSHD $(ProjectDir) && "Deploy.bat" "$(OutDir)" "GUI" && POPD
The GUI application for editing the content displayed on the LCD. This is a C# WPF application.

LCDHardwareMonitor GUI Interop
Project dependencies: None
Other references: None
Include directories: LCDHardwareMonitor API, LCDHardwareMonitor/src
Output: dll
Compiler flags: /clr
Post build: "Deploy.bat" "$(OutDir)" "GUI"
Contains C++/CLI code that allows the C++ LCDHardwareMonitor application and C# GUI application to
communicate with one another. This primarily consists of message sending and receiving.

LCDHardwareMonitor PluginLoader CLR
Project dependencies: LCDHardwareMonitor API CLR
Other references: None
Include directories: LCDHardwareMonitor API, LCDHardwareMonitor/src
References: LCDHardwareMonitor API CLR
Output: dll
Compiler flags: /clr
Post build: "GenTLB.bat" "$(OutDir)" "$(TargetName)" && "Deploy.bat" "$(OutDir)"
Helps handle managed plugins. The code in this assembly is responsible for
creating and destroying AppDomains and doing bookkeeping for managed plugins.
The code here will be injected into the AppDomain for each plugin to deal with
unmanaged to managed interop. The core application loads this assembly and
instantiates the main class through a COM interface (unfortunately). Due to the
COM usage, the assembly must be parsed into .tlb file for the core application
to use and to avoid registering the COM types system-wide.

Sensor Plugin - OpenHardwareMonitor
Project dependencies: LCDHardwareMonitor API CLR
Other references: OpenHardwareMonitorLib
Include directories: LCDHardwareMonitor API
Output: dll
Compiler flags: /clr
Post build: "Deploy.bat" "$(OutDir)" "Sensor Plugins\OpenHardwareMonitor"

Widget Plugin - Filled Bar
Project dependencies: LCDHardwareMonitor API CLR
Other references: None
Include directories: LCDHardwareMonitor API
Output: dll
Post build: "Deploy.bat" "$(OutDir)" "Widget Plugins\Filled Bar"



Directory Structure
The run directory must have the following structure:
LCDHardwareMonitor.exe
LCDHardwareMonitor API CLR.dll
LCDHardwareMonitor PluginLoader CLR.dll
LCDHardwareMonitor PluginLoader CLR.tlb
Sensor Plugins/
	Plugin Name/
		Plugin Name.dll
Widget Plugins/
	Plugin Name/
		Plugin Name.dll
		Plugin Shader.cso
Shaders/
	Built-in Shader.cso
GUI/
	LCDHardwareMonitor.GUI.exe
	GUI Dependency.dll
d3dcompiler_47.dll
