Binding Context
	'this' from codebehind: DataContext = this;
	'this' from XAML: DataContext="{Binding RelativeSource={RelativeSource Self}}"

Binding
	Looks like it *has* to be a property currently, but isn't in the old app. wtf?
	{} is a XAML markup extension. {Binding} is the binding extension.
	Binding ElementName binds to a UI element
	Custom data will not automatically update. Use ObservableCollection and INotifyPropertyChanged.
	Use IValueConverter to manipulate data before display (lots of built-ins)
	xmlns:diag="clr-namespace:System.Diagnostics;assembly=WindowsBase"
	{Binding Title, diag:PresentationTraceSources.TraceLevel=High}
	VS -> Tools -> Options -> Debugging -> Output Window -> WPF Trace Settings
	DisplayMemberPath

Display
	{Binding ElementName=wnd, Path=ActualWidth, StringFormat=Window width: {0:#,#.0}}
	{Binding ElementName=wnd, Path=ActualWidth, StringFormat={}{0:#,#.0}}

Debugging
	DebugDataBindingConverter : IValueConverter { Debug.Break }
	https://spin.atomicobject.com/2013/12/11/wpf-data-binding-debug/

DirectX Stuff
	http://jmorrill.hjtcentral.com/Home/tabid/428/EntryId/438/How-to-get-access-to-WPF-s-internal-Direct3D-guts.aspx

Questions / To Do
	Read the Data Binding Overview
	What is a DependencyProperty?

Reading Notes
	OneTime bindings might be sufficient for many cases
	How should changes propagate to the UI? Implicit based on data charges or explicit calls to update bindings?
	How should projects be structured to implement data in c#?
	When binding to a view, the slash ("/") character in a Path value designates the current item of the view.
	when a singleton object is bound to a collection view, it automatically binds to the CurrentItem of the view.
